#!/usr/bin/env python
import autowaf

# Version of this package (even if built as a child)
EVORAL_VERSION = '0.0.0'

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
# Version history:
#   0.0.0 = 0,0,0
EVORAL_LIB_VERSION = '0.0.0'

# Variables for 'waf dist'
APPNAME = 'evoral'
VERSION = EVORAL_VERSION

# Mandatory variables
srcdir = '.'
blddir = 'build'

def set_options(opt):
	autowaf.set_options(opt)

def configure(conf):
	autowaf.configure(conf)
	autowaf.check_tool(conf, 'compiler_cxx')
	autowaf.check_pkg(conf, 'glibmm-2.4', uselib_store='GLIBMM', atleast_version='2.14.0', mandatory=True)
	autowaf.check_pkg(conf, 'gthread-2.0', uselib_store='GTHREAD', atleast_version='2.14.0', mandatory=True)

def build(bld):
	# Headers
	#bld.install_files('${INCLUDEDIR}/evoral', 'evoral/*.h')
	#bld.install_files('${INCLUDEDIR}/evoral', 'evoral/*.hpp')
	
	# Pkgconfig file
	#autowaf.build_pc(bld, 'EVORAL', EVORAL_VERSION, 'GLIBMM GTHREAD')
	
	# Library
	obj = bld.new_task_gen('cxx', 'shlib')
	obj.source = '''
		src/Control.cpp
		src/ControlList.cpp
		src/ControlSet.cpp
		src/Curve.cpp
		src/Event.cpp
		src/MIDIEvent.cpp
		src/Note.cpp
		src/SMF.cpp
		src/SMFReader.cpp
		src/Sequence.cpp
	'''
	obj.export_incdirs = ['.']
	obj.includes     = ['.', './src']
	obj.name         = 'libevoral'
	obj.target       = 'evoral'
	obj.uselib       = 'GLIBMM GTHREAD'
	obj.vnum         = EVORAL_LIB_VERSION
	obj.install_path = ''
	
	# Unit tests
	obj              = bld.new_task_gen('cxx', 'program')
	obj.source       = 'test/sequence.cpp'
	obj.includes     = ['.', './src']
	obj.uselib_local = 'libevoral'
	obj.target       = 'sequence'
	obj.install_path = ''

def shutdown():
	autowaf.shutdown()

