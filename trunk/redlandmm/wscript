#!/usr/bin/env python
import autowaf
import os

# Version of this package (even if built as a child)
REDLANDMM_VERSION = '0.0.0'
REDLANDMM_LIB_VERSION = '0.0.0'

# Variables for 'waf dist'
VERSION = REDLANDMM_VERSION
APPNAME = 'redlandmm'

# Mandatory variables
srcdir = '.'
blddir = 'build'

def set_options(opt):
	autowaf.set_options(opt)

def configure(conf):
	autowaf.configure(conf)
	autowaf.check_pkg(conf, 'glibmm-2.4', destvar='GLIBMM', vnum='2.14.0', mandatory=True)
	autowaf.check_pkg(conf, 'gthread-2.0', destvar='GTHREAD', vnum='2.14.0', mandatory=True)
	autowaf.check_pkg(conf, 'raptor', destvar='REDLAND', vnum='1.4.18', mandatory=True)
	autowaf.check_pkg(conf, 'redland', destvar='REDLAND', vnum='1.0.8', mandatory=True)
	autowaf.check_tool(conf, 'compiler_cxx')

def build(bld):
	# Headers
	bld.install_files('${INCLUDEDIR}/redlandmm', 'redlandmm/*.hpp')
	
	# Pkgconfig file
	autowaf.build_pc(bld, 'REDLANDMM', REDLANDMM_VERSION, 'GLIBMM GTHREAD REDLAND')
	
	# Library
	obj = bld.new_task_gen('cxx', 'shlib')
	obj.source = '''
		src/Model.cpp
		src/Namespaces.cpp
		src/Node.cpp
		src/Query.cpp
		src/World.cpp
	'''
	obj.includes = '..'
	obj.name     = 'libredlandmm'
	obj.target   = 'redlandmm'
	obj.uselib   = 'REDLAND GLIBMM GTHREAD'
	obj.vnum     = REDLANDMM_LIB_VERSION
	obj.install_path = '${LIBDIR}'

	# Unit tests
	obj = bld.new_task_gen('cxx', 'program')
	obj.source       = 'tests/rdf_test.cpp'
	obj.includes     = ['.']
	obj.uselib_local = 'libredlandmm'
	obj.target       = 'tests/rdf_test'
	obj.install_path = ''

	# Documentation
	autowaf.build_dox(bld, 'REDLANDMM', REDLANDMM_VERSION, srcdir, blddir)
	bld.install_files('${HTMLDIR}', blddir + '/default/doc/html/*')

def shutdown():
	autowaf.shutdown()

