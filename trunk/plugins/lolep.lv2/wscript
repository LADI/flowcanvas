#!/usr/bin/env python
import autowaf

# Version of this package (even if built as a child)
LOLEP_VERSION = '0.0.0'

# Variables for 'waf dist'
APPNAME = 'lolep.lv2'
VERSION = LOLEP_VERSION

# Mandatory variables
srcdir = '.'
blddir = 'build'

def set_options(opt):
	autowaf.set_options(opt)
	opt.tool_options('compiler_cxx')

def configure(conf):
	autowaf.configure(conf)
	autowaf.display_header('Lolep Configuration')
	conf.check_tool('compiler_cxx')
	autowaf.check_pkg(conf, 'lv2core', uselib_store='LV2CORE', mandatory=True)
	autowaf.check_pkg(conf, 'raptor', uselib_store='RAPTOR', atleast_version="1.4.19", mandatory=False)

	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/lv2core/lv2.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/atom/atom.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/atom/atom-helpers.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/contexts/contexts.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/event/event-helpers.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/event/event.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/resize-port/resize-port.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/uri-map/uri-map.h')
	autowaf.check_header(conf, 'lv2/lv2plug.in/ns/ext/uri-unmap/uri-unmap.h')

	conf.env.append_value('CCFLAGS', '-std=c99')
	
	pat = conf.env['shlib_PATTERN']
	ext = pat[pat.rfind('.'):]
	conf.env.append_value('shlib_EXTENSION', ext)

	autowaf.display_msg(conf, "RDF Serialisation", str(conf.env['HAVE_RAPTOR'] == 1))

def build_plugin_lib(bld, lang, bundle, name, source, libs=[]):
	penv = bld.env.copy()
	penv['shlib_PATTERN'] = '%s' + bld.env['shlib_EXTENSION'][0]

	ext = 'c'
	if lang != 'cc':
		ext = 'cpp'

	obj              = bld.new_task_gen(lang, 'shlib')
	obj.env          = penv
	obj.source       = source + ['src/LV2Plugin.cpp']
	obj.includes     = ['.','./src']
	obj.name         = name
	obj.target       = name
	obj.ccflags      = '-D_GNU_SOURCE'
	if libs != []:
		obj.uselib = libs
	obj.install_path = '${LV2DIR}/' + bundle

def build_plugin_data(bld, bundle, name):
	data_file = '%s.ttl' % name
	bld.install_files('${LV2DIR}/' + bundle, data_file)

def build_plugin(bld, lang, bundle, name, source, libs=[]):
	build_plugin_lib(bld, lang, bundle, name, source, libs)
	build_plugin_data(bld, bundle, name)
	
def build_arith_data(bld, bundle, sym, operator):
	obj              = bld.new_task_gen('subst')
	obj.source       = 'arith.ttl.in'
	obj.target       = sym.lower() + '.ttl'
	obj.install_path = ''
	obj.dict = {
		'SYMBOL'   : sym,
		'NAME'     : sym.title(),
		'TINYNAME' : operator
	}
	build_plugin_data(bld, bundle, sym)

def build(bld):
	build_plugin(bld, 'cxx', 'lolep.lv2', 'rdf-read', ['src/rdf-read.cpp'], 'RAPTOR')
	build_plugin(bld, 'cxx', 'lolep.lv2', 'rdf-write', ['src/rdf-write.cpp'], 'RAPTOR')

	build_plugin(bld, 'cxx', 'lolep.lv2', 'print', ['src/print.cpp'])
	build_plugin(bld, 'cxx', 'lolep.lv2', 'object', ['src/object.cpp'])
	
	build_plugin_lib(bld, 'cxx', 'lolep.lv2', 'arith', ['src/arith.cpp'])
	build_arith_data(bld, 'lolep.lv2', 'sum', '+')
	build_arith_data(bld, 'lolep.lv2', 'difference', '-')
	build_arith_data(bld, 'lolep.lv2', 'product', '*')
	
	bld.install_files('${LV2DIR}/lolep.lv2', 'manifest.ttl')
