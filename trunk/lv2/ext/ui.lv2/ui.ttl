# LV2 UI Extension
# Copyright (C) 2006-2008 Lars Luthman <lars.luthman@gmail.com>
# Copyright (C) 2009 Dave Robillard <dave@drobilla.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

@prefix ui:   <http://lv2plug.in/ns/extensions/ui#> .
@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

<http://lv2plug.in/ns/extensions/ui> a lv2:Specification ;
    doap:license <http://usefulinc.com/doap/licenses/mit> ;
    doap:name    "LV2 UI" ;
    doap:maintainer [
        a foaf:Person ;
        foaf:name "Lars Luthman" ;
        foaf:mbox <mailto:lars.luthman@gmail.com>
    ] , [
        a foaf:Person ;
        foaf:name     "Dave Robillard" ;
        foaf:homepage <http://drobilla.net/> ;
        rdfs:seeAlso  <http://drobilla.net/drobilla.rdf>
    ] ;
    rdfs:comment """
This extension defines an interface that can be used in LV2 plugins and hosts
to create UIs for plugins. The UIs are similar to plugins and reside in shared object
files in an LV2 bundle.  UIs are associated with a plugin in RDF using the triples
<pre>    
@prefix lv2ui: &lt;http://lv2plug.in/ns/extensions/ui#&gt; .
&lt;http://my.plugin&gt;   lv2ui:ui     &lt;http://my.pluginui&gt; .
&lt;http://my.plugin&gt;   a            lv2ui:GtkUI .
&lt;http://my.pluginui&gt; lv2ui:binary &lt;myui.so&gt; .
</pre>
where &lt;http://my.plugin&gt; is the URI of the plugin,
&lt;http://my.pluginui&gt; is the URI of the plugin UI and &lt;myui.so&gt;
is the relative URI to the shared object file.

While it is possible to have the plugin UI and the plugin in the same shared
object file it is probably a good idea to keep them separate so that hosts
that don't want UIs don't have to load the UI code.  A UI MUST specify its
class in the RDF data, in this case lv2ui:GtkUI. The class defines what type
the UI is, e.g. what graphics toolkit it uses.  Any type of UI class can be
defined separately from this extension.

(Note: the prefix above is used throughout this file for the same URI)

It is possible to have multiple UIs for the same plugin, or to have the UI
for a plugin in a different bundle from the actual plugin - this way people
other than the plugin author can write plugin UIs independently without
editing the original plugin bundle.

Note that the process that loads the shared object file containing the UI
code and the process that loads the shared object file containing the actual
plugin implementation does not have to be the same. There are many valid
reasons for having the plugin and the UI in different processes, or even on
different machines. This means that you can <b>not</b> use singletons and
global variables and expect them to refer to the same objects in the UI and
the actual plugin. The function callback interface defined in this header
is all you can expect to work.

Since the LV2 specification itself allows for extensions that may add new
functionality that could be useful to control with a UI, this extension
allows for meta-extensions that can extend the interface between the UI and
the host. These extensions mirror the extensions used for plugins - there are
required and optional "features" that you declare in the RDF data for the UI as
<pre>    
&lt;http://my.pluginui&gt; lv2ui:requiredFeature &lt;http://my.feature&gt; .
&lt;http://my.pluginui&gt; lv2ui:optionalFeature &lt;http://my.feature&gt; .
</pre>
These predicates have the same semantics as lv2:requiredFeature and
lv2:optionalFeature - if a UI is declaring a feature as required, the host is
NOT allowed to load it unless it supports that feature, and if it does support
a feature (required or optional) it MUST pass that feature's URI and any
additional data (specified by the meta-extension that defines the feature) in
a LV2_Feature struct (as defined in lv2.h) to the UI's instantiate() function.

These features may be used to specify how to pass data between the UI and
the plugin port buffers - see LV2UI_Write_Function for details.
""" .


ui:UI a rdfs:Class ;
    rdfs:label "LV2 UI" ;
    rdfs:comment "A UI for an LV2 plugin" .

ui:optionalFeature a rdf:Property ;
    rdfs:domain  ui:UI ;
    rdfs:range   ui:Feature ;
    rdfs:label   "Optional feature" ;
    rdfs:comment """
Signifies that a UI supports a feature.  This has the same semantics as
lv2:optionalFeature, but is for UIs rather than Plugins.""" .

ui:requiredFeature a rdf:Property ;
    rdfs:domain  ui:UI ;
    rdfs:range   ui:Feature ;
    rdfs:label   "Required feature" ;
    rdfs:comment """
Signifies that a UI requires a feature.  This has the same semantics as
lv2:optionalFeature, but is for UIs rather than Plugins.""" .

ui:GtkUI a rdfs:Class ;
    rdfs:subClassOf ui:UI ;
    rdfs:comment """
A UI where the LV2_Widget is a pointer to a Gtk+ 2.0 compatible GtkWidget,
and the host guarantees that the Gtk+ library has been initialised and the
Glib main loop is running before an UI of this type is instantiated.""" .

ui:makeResident a lv2:Feature ;
	rdfs:comment """
If this feature is required by a UI the host MUST NEVER unload the shared
library containing the UI implementation during the lifetime of the host
process (e.g. never calling dlclose() on Linux). This feature may be needed by
e.g. a Gtk UI that registers its own Glib types using g_type_register_static()
- if it gets unloaded and then loaded again the type registration will break,
since there is no way to unregister the types when the library is unloaded. The
data pointer in the LV2_Feature for this feature should always be set to NULL.
""" .

ui:makeSONameResident a lv2:Feature ;
	rdfs:comment """
This feature is ELF specific - it should only be used by UIs that
use the ELF file format for the UI shared object files (e.g. on Linux).
If it is required by an UI the UI should also list a number of SO names
(shared object names) for libraries that the UI shared object
depends on and that may not be unloaded during the lifetime of the host
process, using the predicate @c lv2ui:residentSONames, like this:
<pre>
&lt;http://my.pluginui&gt; lv2ui:residentSONames "libgtkmm-2.4.so.1", "libfoo.so.0"
</pre>
The host MUST then make sure that the shared libraries with the given ELF
SO names are not unloaded when the plugin UI is, but stay loaded during
the entire lifetime of the host process. On Linux this can be accomplished
by calling dlopen() on the shared library file with that SO name and never
calling a matching dlclose(). However, if a plugin UI requires the 
@c lv2ui:makeSONameResident feature, it MUST ALWAYS be safe for the host to
just never unload the shared object containing the UI implementation, i.e.
act as if the UI required the @c lv2ui:makeResident feature instead. Thus
the host only needs to find the shared library files corresponding to the
given SO names if it wants to save RAM by unloading the UI shared object 
file when it is no longer needed. The data pointer for the LV2_Feature for
this feature should always be set to NULL.
""" .

ui:noUserResize a lv2:Feature ;
	rdfs:comment """
If a UI requires this feature it indicates that it does not make sense
to let the user resize the main widget, and the host should prevent that.
This feature may not make sense for all UI types. The data pointer for the
LV2_Feature for this feature should always be set to NULL.
""" .

ui:fixedSize a lv2:Feature ;
	rdfs:comment """
If a UI requires this feature it indicates the same thing as 
lv2ui:noUserResize, and additionally it means that the UI will not resize
the main widget on its own - it will always remain the same size (e.g. a
pixmap based GUI). This feature may not make sense for all UI types.
The data pointer for the LV2_Feature for this feature should always be set
to NULL.

UIs written to this specification do not need to be threadsafe - the 
functions defined below may only be called in the same thread as the UI
main loop is running in.

Note that this UI extension is NOT a lv2:Feature. There is no way for a 
plugin to know whether the host that loads it supports UIs or not, and 
the plugin must ALWAYS work without the UI (although it may be rather 
useless unless it has been configured using the UI in a previous session).

A UI does not have to be a graphical widget, it could just as well be a
server listening for OSC input or an interface to some sort of hardware
device, depending on the RDF class of the UI.
""" .
