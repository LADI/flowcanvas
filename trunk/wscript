#!/usr/bin/env python
import glob
import os
import string
import sys
import subprocess

import autowaf
import Logs
import Options
from TaskGen import feature, before, after

sys.path.append("./lv2/core.lv2/")
import lv2config

# Variables for 'waf dist'
VERSION = '0.0.1'
APPNAME = 'drobillad'

# Mandatory variables
top = '.'
out = 'build'

@feature('c', 'cxx')
@after('apply_incpaths')
def include_lv2_h(self):
	lv2_core_path = os.path.join(self.bld.bldnode.abspath(), '..', 'lv2', 'core.lv2')
	self.env.append_value('INCPATHS', lv2_core_path)

def options(opt):
	autowaf.set_options(opt)
	opt.add_option('--cmd', type='string', dest='cmd',
				   help='Command to run from build directory (for run command)')
	opt.sub_options('lv2/core.lv2')
	opt.sub_options('lv2')
	opt.sub_options('slv2')
	opt.sub_options('raul')
	opt.sub_options('flowcanvas')
	opt.sub_options('patchage')
	opt.sub_options('redlandmm')
	opt.sub_options('ingen')
	opt.sub_options('machina')

def sub_config_and_use(conf, name, has_objects = True, pkgname = ''):
	conf.sub_config(name)
	if pkgname == '':
		pkgname = name
	autowaf.set_local_lib(conf, pkgname, has_objects)

def configure(conf):
	autowaf.set_recursive()
	conf.line_just = 67
	autowaf.configure(conf)

	# Build local LV2 include tree to build against included extensions
	autowaf.display_header('LV2 Configuration')
	lv2_path = str.join(os.pathsep, [
			os.path.join(os.getcwd(), 'lv2'),
			os.path.join(os.getcwd(), 'lv2', 'ext'),
			os.path.join(os.getcwd(), 'lv2', 'extensions') ])
	lv2config.build_tree(lv2_path, os.path.join('build', 'lv2'))
	conf.env.append_value('CPPPATH', os.path.join(os.getcwd(), 'build'))
	print

	sub_config_and_use(conf, 'lv2/core.lv2', False, 'lv2core')
	sub_config_and_use(conf, 'lv2', False)
	sub_config_and_use(conf, 'slv2')
	sub_config_and_use(conf, 'raul')
	sub_config_and_use(conf, 'flowcanvas')
	sub_config_and_use(conf, 'patchage')
	sub_config_and_use(conf, 'redlandmm')
	sub_config_and_use(conf, 'ingen', False)
	sub_config_and_use(conf, 'machina', False)
	sub_config_and_use(conf, 'plugins/dirg.lv2')
	sub_config_and_use(conf, 'plugins/lolep.lv2')

def run(ctx):
	if not Options.options.cmd:
		print >>sys.STDERR, "error: missing --cmd option for run command"
		return

	cmd = Options.options.cmd
	Logs.pprint('GREEN', 'Running %s' % cmd)

	env          = os.environ
	library_path = []
	if env.has_key('LD_LIBRARY_PATH'):
		library_path = env['LD_LIBRARY_PATH'].split(os.pathsep)
	for i in 'flowcanvas raul slv2'.split():
		library_path += [ os.path.join(os.getcwd(), 'build', i) ]

	ingen_module_path = []
	for i in 'client engine module shared engine client gui serialisation'.split():
		path = os.path.join(os.getcwd(), 'build', 'ingen', 'src', i)
		library_path      += [ path ]
		ingen_module_path += [ path ]

	env['LD_LIBRARY_PATH']   = os.pathsep.join(library_path)
	env['INGEN_MODULE_PATH'] = os.pathsep.join(ingen_module_path)
	subprocess.call(cmd, shell=True, env=env)

def build(bld):
	autowaf.set_recursive()
	bld.add_subdirs('''
		lv2/core.lv2
		lv2
		slv2
		raul
		flowcanvas
		patchage
		redlandmm
		ingen
		plugins/dirg.lv2
		plugins/lolep.lv2
		machina
	''')

def test(ctx):
	ctx.recurse('raul')
	ctx.recurse('slv2')
